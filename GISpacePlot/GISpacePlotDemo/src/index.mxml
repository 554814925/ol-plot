<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:ns="http://www.esri.com/2008/ags"
			   xmlns:components="components.*"
			   minWidth="955" minHeight="600" creationComplete="init()"
			   pageTitle="gispace plot 1.4.3" xmlns:layers="gispace.layers.*">
	<fx:Style source="default.css"/>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.events.ExtentEvent;
			import com.esri.ags.events.GraphicEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.utils.WebMercatorUtil;
			
			import events.PlotEvent;
			
			import gispace.plot.display.PlotGraphic;
			import gispace.plot.symbols.GradientFillSymbol;
			import gispace.plot.symbols.ImageFillSymbol;
			import gispace.plot.tools.PlotEditTool;
			
			/**
			 * 动态标绘API，基于ArcGIS Flex API开发，支持3.6版本。
			 * 当前版本1.4.3，提供的功能：绘制、编辑、保存（序列化成JSON及反序列化）、文本标注。
			 * 1.4.2新增功能：渐变填充，Google地图。
			 * 绘制接口：PlotDrawTool
			 * 编辑接口：PlotEditTool
			 * 序列化接口：PlotEncoder
			 * 反序列化接口：PlotDecoder
			 * 标绘渲染接口：PlotGraphic
			 * 渐变填充类：GradientFillSymbol
			 * 图片填充类：ImageFillSymbol
			 * 地图截图工具：ScreenCapTool
			 * 测量工具：MeasureTool
			 * 具体用法请参考演示系统源码。
			 * 1.4.3新增功能：标绘符号控制点增加和删除。
			 * 此API免费使用，长期维护更新，欢迎反馈：
			 * 开发者：@平凡的世界
			 * QQ号：21587252
			 * 邮箱：gispace@yeah.net
			 * 博客：http://blog.csdn.net/gispace
			 * 动态标绘交流QQ群：318659439
			 * 
			 * 如果想要收到API更新邮件，请在博客评论或者资源下载页面留下您的邮箱地址。
			 * 
			 * */

			private var plotEditTool:PlotEditTool;
			
			private static const STATE_MOVE_SCALE_ROTATE:int = 0;
			private static const STATE_EDIT_CONTROL_POINTS:int = 1;
			
			private var outline:SimpleLineSymbol = new SimpleLineSymbol("solid", 0xff0000, 1, 1);
			private var markerOutline:SimpleLineSymbol = new SimpleLineSymbol("dash", 0x000000, 1, 2);
			private var tank:PictureMarkerSymbol = new PictureMarkerSymbol("assets/tank.png",40, 40);
			private var plane:PictureMarkerSymbol = new PictureMarkerSymbol("assets/plane.png", 40, 40);
			private var markerSymbol:SimpleMarkerSymbol = new SimpleMarkerSymbol("circle", 25, 0xff0000, 1, 0, 0, 0, markerOutline);
			private var multiMarkerSymbol:SimpleMarkerSymbol = new SimpleMarkerSymbol("circle", 25, 0x00ff00, 1, 0, 0, 0, markerOutline);
			private var lineSymbol:SimpleLineSymbol = new SimpleLineSymbol("solid", 0x0000ff, 1, 2);
			private var fillSymbol:SimpleFillSymbol = new SimpleFillSymbol("solid", 0x00ff00, 0.5, outline);
			
			private var gradientFill:GradientFillSymbol = new GradientFillSymbol(GradientType.LINEAR, 0x00ff00, outline);
			private var halaLakeFill:ImageFillSymbol = new ImageFillSymbol("assets/hala.png");
			private var nishaFill:ImageFillSymbol = new ImageFillSymbol("assets/2011210_SSC_png.png");
			
			private var editState:int = 0;
			private var activePlot:PlotGraphic;
			[Bindable]
			private var drawLayer:GraphicsLayer;
			
			private var imageExtent:Extent = new Extent(10839941.704392128,4605313.948201631,10889128.932093572,4640513.199726907);
			private var image2Extent:Extent = new Extent(115.78078, 28.384722, 116.75583, 29.749167);
			private var initExtent:Extent = new Extent(10718330.392390322,4551307.365866684,11011848.58100551,4699595.200739983);
			
			private function init():void{
				this.drawLayer = new GraphicsLayer();
				this.drawLayer.addEventListener(GraphicEvent.GRAPHIC_ADD, graphicAddHandler);
				this.map.addLayer(this.drawLayer);
				// 实例化编辑工具
				this.plotEditTool = new PlotEditTool(map);
				this.addEventListener(KeyboardEvent.KEY_UP, keyEventHandler);
				// map单击，取消标绘编辑状态
				this.map.addEventListener(MouseEvent.CLICK, mapClickHandler);
				// 以图片填充的方式显示哈拉湖
				var graphic:Graphic = new Graphic(this.imageExtent, this.halaLakeFill);
				this.tempLayer.add(graphic);
				var newExtent:Extent = WebMercatorUtil.geographicToWebMercator(this.image2Extent) as Extent;
				var graphic2:Graphic = new Graphic(newExtent, this.nishaFill);
				this.tempLayer.add(graphic2);
			}
			
			private function mapClickHandler(event:MouseEvent):void{
				if(this.activePlot)
					this.plotEditTool.deactivate();
			}
			
			private function graphicAddHandler(event:GraphicEvent):void{
				// 设置鼠标单击事件响应
				var plot:Graphic = event.graphic;
				plot.addEventListener(MouseEvent.CLICK, graphicClickHandler);
			}
			
			// 删除
 			private function keyEventHandler(event:KeyboardEvent):void{
				if(this.activePlot && event.keyCode == Keyboard.DELETE){
					this.activePlot.removeEventListener(MouseEvent.CLICK, graphicClickHandler);
					this.drawLayer.remove(this.activePlot);
					this.activePlot = null;
				}
			}
			
			private function newPlotHandler(event:PlotEvent):void{
				var plot:PlotGraphic = event.data as PlotGraphic;
				// 对plot设置渲染符号
				var geometry:Geometry = plot.geometry;
				if(geometry is Polygon)
					plot.symbol = fillSymbol;
				else if(geometry is Polyline)
					plot.symbol = lineSymbol;
				else
					plot.symbol = markerSymbol;
				// 测试文本标注
				plot.text = "动态标绘";
				// 显示
				this.drawLayer.add(plot);
			}
			
			private function graphicClickHandler(event:MouseEvent):void{
				var graphic:PlotGraphic = event.currentTarget as PlotGraphic;
				if(graphic == this.activePlot){
					if(this.editState == STATE_MOVE_SCALE_ROTATE){
						// 开启 移动+编辑控制点 状态
						this.plotEditTool.activate(PlotEditTool.MOVE|PlotEditTool.EDIT_CONTROL_POINTS, graphic);
						this.editState = STATE_EDIT_CONTROL_POINTS;
					}
					else{
						// 开启 移动+旋转缩放 状态
						this.plotEditTool.activate(PlotEditTool.MOVE|PlotEditTool.SCALE_ROTATE, graphic);
						this.editState = STATE_MOVE_SCALE_ROTATE;
					}
				}
				else{
					this.activePlot = graphic;
					this.plotEditTool.activate(PlotEditTool.MOVE|PlotEditTool.EDIT_CONTROL_POINTS, graphic);
					this.editState = STATE_EDIT_CONTROL_POINTS;
				}
				this.symbolPanel.updateSymbol(this.activePlot.symbol, this.activePlot.text, this.activePlot.textFormat);
				this.updateCurrentStyles(this.activePlot.symbol);
				event.stopImmediatePropagation();
			}
			
			private function applySymbolHandler(event:PlotEvent):void{
				if(this.activePlot == null)
					return;
				var symbol:Symbol = event.data.symbol as Symbol;
				this.activePlot.symbol = symbol;
				this.activePlot.text = event.data.label as String;
				this.activePlot.textFormat = event.data.format;
				this.activePlot.refresh();
				this.updateCurrentStyles(symbol);
			}
			
			private function updateCurrentStyles(symbol:Symbol):void{
				if(symbol is SimpleMarkerSymbol)
					this.markerSymbol = symbol as SimpleMarkerSymbol;
				else if(symbol is SimpleLineSymbol)
					this.lineSymbol = symbol as SimpleLineSymbol;
				else if(symbol is SimpleFillSymbol)
					this.fillSymbol = symbol as SimpleFillSymbol;
			}
			
			protected function map_extentChangeHandler(event:ExtentEvent):void{
				trace(event.extent.xmin + "," + event.extent.ymin + "," + event.extent.xmax + "," + event.extent.ymax);
			}
			
			private function loadHandler():void{
				this.map.extent = this.initExtent;
			}
			
		]]>
	</fx:Script>
	<ns:Map id="map" logoVisible="false" scaleBarVisible="false" zoomSliderVisible="false" wrapAround180="false" load="loadHandler()" extentChange="map_extentChangeHandler(event)">
		<ns:ArcGISTiledMapServiceLayer name="地图1" url="http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineCommunity/MapServer"/>
		<layers:GoogleMapLayer type="{GoogleMapLayer.TYPE_STREET}" visible="false" name="地图2" proxyURL="proxy.jsp"/>
		<layers:GoogleMapLayer type="{GoogleMapLayer.TYPE_SATELLITE}" visible="false" name="影像图" proxyURL="proxy.jsp"/>
		<layers:GoogleMapLayer type="{GoogleMapLayer.TYPE_TERRAIN}" visible="false" name="地形图" proxyURL="proxy.jsp"/>
		<ns:GraphicsLayer id="tempLayer" alpha="1"/>
	</ns:Map>
	<components:Header/>
	<components:Copyright bottom="45"/>
	<components:Menu left="5" top="15" horizontalCenter="0" plotLayer="{this.drawLayer}"/>
	<components:DrawPanel id="drawPanel" left="5" top="120" map="{map}"
						  newPlot="newPlotHandler(event)"/>
	<components:SymbolPanel id="symbolPanel" left="5" bottom="100"
							applySymbol="applySymbolHandler(event)"/>
	<components:MapSwitcher id="mapSwitcher" top="100" right="10" map="{map}"/>
	<components:Toolbar right="10" top="160" map="{map}"/>
	<components:Footer bottom="0"/>	
</s:Application>
